cmake_minimum_required(VERSION 3.20)

# Project settings
## Read VERSION file
file(READ "${CMAKE_SOURCE_DIR}/VERSION" PROJECT_VERSION_RAW)
string(STRIP "${PROJECT_VERSION_RAW}" PROJECT_VERSION)
project(pano-yawfix VERSION ${PROJECT_VERSION} LANGUAGES CXX)

# vcpkg settings
set(CMAKE_TOOLCHAIN_FILE /usr/local/vcpkg/scripts/buildsystems/vcpkg.cmake CACHE STRING "Vcpkg toolchain file")

# Automatically add CMake path for vcpkg packages (Linux only)
if(UNIX AND NOT APPLE)
    list(APPEND CMAKE_PREFIX_PATH "/usr/local/vcpkg/installed/x64-linux/share")
endif()

# C++ settings
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Compiler options
if(MSVC)
    add_compile_options(/W4 /WX)
else()
    add_compile_options(-Wall -Wextra -Wpedantic -Werror)
endif()

# Generate version header
configure_file(${CMAKE_SOURCE_DIR}/include/version.h.in ${CMAKE_BINARY_DIR}/version.h @ONLY)

# Include paths
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_BINARY_DIR})

# Required libraries
find_package(OpenCL REQUIRED)

# Search for GTest (prefer vcpkg, fallback to pkg-config)
find_package(GTest CONFIG QUIET)
if(NOT GTest_FOUND)
    find_package(PkgConfig QUIET)
    if(PKG_CONFIG_FOUND)
        pkg_check_modules(GTEST QUIET gtest_main gtest)
    endif()
endif()

set(ENABLE_TESTING OFF)
if(GTest_FOUND OR GTEST_FOUND)
    set(ENABLE_TESTING ON)
endif()

# Library sources
file(GLOB_RECURSE LIB_SOURCES CONFIGURE_DEPENDS "src/*.cpp")
file(GLOB_RECURSE HEADERS CONFIGURE_DEPENDS "include/*.h")

# Executable
add_executable(pano-yawfix src/main.cpp ${LIB_SOURCES})
## target_link_libraries(pano-yawfix PRIVATE nlohmann_json::nlohmann_json tabulate::tabulate)

## OpenCL and platform-dependent settings
add_definitions(-DCL_TARGET_OPENCL_VERSION=300)
if(MINGW)
    # build/windows/libOpenCL.dll.a is generated by generate_opencl_importlib.sh
    target_link_libraries(pano-yawfix PRIVATE ${CMAKE_BINARY_DIR}/libOpenCL.dll.a)
else()
    target_link_libraries(pano-yawfix PRIVATE OpenCL::OpenCL)
endif()

if(WIN32)
    target_link_libraries(pano-yawfix PRIVATE pdh psapi kernel32)
    if(MSVC)
        set_target_properties(pano-yawfix PROPERTIES
            WIN32_EXECUTABLE TRUE
            LINK_FLAGS "/SUBSYSTEM:CONSOLE"
        )
    endif()
elseif(UNIX AND NOT APPLE)
    target_link_libraries(pano-yawfix PRIVATE pthread)
endif()

## ======================
## Test related
## ======================
if(ENABLE_TESTING)
    enable_testing()
    include(GoogleTest)

    # Unit tests
    file(GLOB_RECURSE TEST_SOURCES CONFIGURE_DEPENDS "tests/*.cpp")
    list(FILTER LIB_SOURCES EXCLUDE REGEX "src/main\\.cpp$")
    if(TEST_SOURCES)
        add_executable(unit_tests ${TEST_SOURCES} ${LIB_SOURCES})

        if(GTest_FOUND)
            target_link_libraries(unit_tests PRIVATE GTest::gtest GTest::gtest_main)
        else()
            target_link_libraries(unit_tests PRIVATE ${GTEST_LIBRARIES} pthread)
            target_include_directories(unit_tests PRIVATE ${GTEST_INCLUDE_DIRS})
        endif()

        if(MINGW)
            target_link_libraries(unit_tests PRIVATE ${CMAKE_BINARY_DIR}/libOpenCL.dll.a pdh)
        else()
            target_link_libraries(unit_tests PRIVATE OpenCL::OpenCL)
        endif()

        # Skip gtest_discover_tests for MinGW cross-build (cannot run .exe)
        if(NOT MINGW)
            gtest_discover_tests(unit_tests)
        endif()
    endif()

    # Benchmark (optional)
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/benchmark/benchmark_main.cpp)
        add_executable(benchmark_tests benchmark/benchmark_main.cpp ${LIB_SOURCES})

        if(GTest_FOUND)
            target_link_libraries(benchmark_tests PRIVATE GTest::gtest GTest::gtest_main)
        else()
            target_link_libraries(benchmark_tests PRIVATE ${GTEST_LIBRARIES} pthread)
            target_include_directories(benchmark_tests PRIVATE ${GTEST_INCLUDE_DIRS})
        endif()

        if(MINGW)
            target_link_libraries(benchmark_tests PRIVATE ${CMAKE_BINARY_DIR}/libOpenCL.dll.a pdh)
        else()
            target_link_libraries(benchmark_tests PRIVATE OpenCL::OpenCL)
        endif()
    endif()
else()
    message(STATUS "Testing disabled - GTest not found")
endif()

## ======================
## Install and CPack
## ======================
install(TARGETS pano-yawfix DESTINATION bin)
include(CPack)
